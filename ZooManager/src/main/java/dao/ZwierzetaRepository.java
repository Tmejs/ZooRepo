package dao;

import dao.RepositoryBase;
import dao.mappers.IMapResultSetIntoEntity;
import dao.mappers.ZwierzeDoTypJedzMapper;
import dao.mappers.ZwierzeDoTypWybMapper;
import dao.model.IHaveId;
//import dao.model.RodzajJedzenia;
import dao.model.TypWybiegu;
import dao.model.Zwierze;
import dao.model.ZwierzeDoTypJedzenia;
import dao.model.ZwierzeDoTypWybiegu;
import dao.repositories.IRepositoryZwierze;
import dao.uow.IUnitOfWork;
import dao.uow.UnitOfWork;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author TKK
 */
public class ZwierzetaRepository extends RepositoryBase<Zwierze> implements IRepositoryZwierze {

    public static final String TABLE_NAME = "zwierzeta";

    public ZwierzetaRepository(Connection connection, IMapResultSetIntoEntity<Zwierze> mapper, IUnitOfWork uow) {
        super(connection, mapper, uow);
    }

    @Override
    //zwracam skrypt wrzucajacy
    protected String insertSql() {
        return "insert into "
                + tableName()
                + " (nazwa, tempo_jedzenia, poziom_najedzenia, id_wybiegu) values"
                + "(?,?,?,?)";
    }

    @Override
    protected String updateSql() {
        return "update "
                + tableName()
                + " set (nazwa, tempo_jedzenia, poziom_najedzenia, id_wybiegu) ="
                + "(?,?,?,?)"
                + "where "
                + "id = ?";
    }

    @Override
    //metoda ustawiajaca ?-ki
    protected void setUpdate(Zwierze entity) throws SQLException {
        update.setString(1, entity.getNazwa());
        update.setInt(2, entity.getTempoJedzenia());
        update.setDouble(3, entity.getPoziomNajedzenia());
        update.setInt(4, entity.getIdWybiegu());
        update.setInt(5, entity.getId());
    }

    @Override
    protected void setInsert(Zwierze entity) throws SQLException {
        insert.setString(1, entity.getNazwa());
        insert.setInt(2, entity.getTempoJedzenia());
        insert.setDouble(3, entity.getPoziomNajedzenia());
        insert.setInt(4, entity.getIdWybiegu());
    }

    @Override
    protected String createTableSql() {

        return "create table "
                + tableName()
                + " (id int generated by default as identity primary key,"
                + "nazwa varchar(20),"
                + "tempo_jedzenia int,"
                + "poziom_najedzenia int,"
                + "id_wybiegu int,"
                + "foreign key(id_wybiegu) references "
                + WybiegRepository.TABLE_NAME
                + "(id));";
    }

    @Override
    protected String tableName() {
        return TABLE_NAME;
    }

    @Override
    public List<Zwierze> getByName(String name) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    protected void insertNecessaryData() throws SQLException {
    }

    @Override
    protected void addMoreData(Zwierze entity) {

        ZwierzeDoTypJedzeniaRepository zwDoTypJedz = new ZwierzeDoTypJedzeniaRepository(connection, new ZwierzeDoTypJedzMapper(), new UnitOfWork(connection));
        entity.setRodzajJedzenia(zwDoTypJedz.pobierzListeJedzeniaDlaZwierze(entity.getId()));

        ZwierzeDoTypWybieguRepository zwDoTypWyb = new ZwierzeDoTypWybieguRepository(connection, new ZwierzeDoTypWybMapper(), uow);
        entity.setRodzajWybiegu(zwDoTypWyb.getRodzajeWybieguDlaZwierze(entity.getId()));
    }

    @Override
    protected void insertPlus(Zwierze entity) {
        try {
            RepositoryCatalogue repos = new RepositoryCatalogue();
            if(entity.getRodzajJedzenia()!=null)
            for (ZwierzeDoTypJedzenia zw : entity.getRodzajJedzenia()) {
                repos.zwDoJedz.add(zw);
            };
            if(entity.getRodzajWybiegu()!=null)
            for (ZwierzeDoTypWybiegu zw : entity.getRodzajWybiegu()) {
                repos.zwierzeDoTypWybieguRepository().add(zw);
            }
            repos.save();
            repos.close();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

}
